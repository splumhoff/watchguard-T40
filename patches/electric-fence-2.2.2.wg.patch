WatchGuard patches to sources for electric-fence-2.2.2 as of
Mon May  9 13:51:02 PDT 2022
The patches shown here have been applied to source .tar.gz 
files supplied with the WatchGuard Open Source Archive.

==========================================================================
--- electric-fence-2.2.2/eftest.c.orig	2022-05-09 13:51:02.266503846 -0700
+++ electric-fence-2.2.2/eftest.c	2022-05-09 13:51:02.326501411 -0700
@@ -24,7 +24,7 @@
 extern int	EF_PROTECT_BELOW;
 extern int	EF_ALIGNMENT;
 
-static jmp_buf	env;
+static sigjmp_buf	env;
 
 /*
  * There is still too little standardization of the arguments and return
@@ -40,13 +40,13 @@
 )
  {
 	signal(PAGE_PROTECTION_VIOLATED_SIGNAL, SIG_DFL);
-	longjmp(env, 1);
+	siglongjmp(env, 1);
 }
 
 static int
 gotSegmentationFault(int (*test)(void))
 {
-	if ( setjmp(env) == 0 ) {
+	if ( sigsetjmp(env, 1) == 0 ) {
 		int			status;
 
 		signal(PAGE_PROTECTION_VIOLATED_SIGNAL
--- electric-fence-2.2.2/page.c.orig	2022-05-09 13:51:02.266503846 -0700
+++ electric-fence-2.2.2/page.c	2022-05-09 13:51:02.326501411 -0700
@@ -31,7 +31,7 @@
 
 #if ( !defined(sgi) && !defined(_AIX) &&!defined(__USE_BSD))
 extern int	sys_nerr;
-extern char *	sys_errlist[];
+/* extern char *	sys_errlist[]; */
 #endif
 
 static const char *
@@ -39,13 +39,8 @@
 {
 #if ( defined(sgi) )
 	return strerror(oserror());
-#elif ( defined(_AIX) )
-	return strerror(errno);
 #else
-	if ( errno > 0 && errno < sys_nerr )
-		return sys_errlist[errno];
-	else
-		return "Unknown error.\n";
+	return strerror(errno);
 #endif
 }
 
--- electric-fence-2.2.2/Makefile.orig	2022-05-09 13:51:02.222505631 -0700
+++ electric-fence-2.2.2/Makefile	2022-05-09 13:51:02.322501574 -0700
@@ -16,15 +16,7 @@
 
 OBJECTS= efence.o page.o print.o
 
-all:	libefence.a libefence.so.0.0 tstheap eftest
-	@ echo
-	@ echo "Testing Electric Fence."
-	@ echo "After the last test, it should print that the test has PASSED."
-	./eftest
-	./tstheap 3072
-	@ echo
-	@ echo "Electric Fence confidence test PASSED." 
-	@ echo
+all:	libefence.a libefence.so.0.0
 
 install: libefence.a efence.3 libefence.so.0.0
 	$(INSTALL) -m 755 ef.sh $(BIN_INSTALL_DIR)/ef
@@ -54,7 +46,7 @@
 	$(AR) crv libefence.a $(OBJECTS)
 
 libefence.so.0.0: $(OBJECTS)
-	gcc -g -shared -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \
+	$(CC) -g -shared -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \
 		$(OBJECTS) -lpthread -lc 
 
 tstheap: libefence.a tstheap.o
--- electric-fence-2.2.2/print.c.orig	2022-05-09 13:51:02.270503683 -0700
+++ electric-fence-2.2.2/print.c	2022-05-09 13:51:02.330501249 -0700
@@ -111,7 +111,7 @@
 				break;
 			case 'c':
 				{
-					char	c = va_arg(args, char);
+					char	c = va_arg(args, int);
 					
 					(void) write(2, &c, 1);
 				}
--- electric-fence-2.2.2/patches/ElectricFence-2.0.5-longjmp.patch.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/ElectricFence-2.0.5-longjmp.patch	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,27 @@
+--- ElectricFence-2.0.5/eftest.c.ewt	Tue Jun  2 09:25:10 1998
++++ ElectricFence-2.0.5/eftest.c	Tue Jun  2 09:24:58 1998
+@@ -24,7 +24,7 @@
+ extern int	EF_PROTECT_BELOW;
+ extern int	EF_ALIGNMENT;
+ 
+-static jmp_buf	env;
++static sigjmp_buf	env;
+ 
+ /*
+  * There is still too little standardization of the arguments and return
+@@ -40,13 +40,13 @@
+ )
+  {
+ 	signal(PAGE_PROTECTION_VIOLATED_SIGNAL, SIG_DFL);
+-	longjmp(env, 1);
++	siglongjmp(env, 1);
+ }
+ 
+ static int
+ gotSegmentationFault(int (*test)(void))
+ {
+-	if ( setjmp(env) == 0 ) {
++	if ( sigsetjmp(env, 1) == 0 ) {
+ 		int			status;
+ 
+ 		signal(PAGE_PROTECTION_VIOLATED_SIGNAL
--- electric-fence-2.2.2/patches/ElectricFence-2.2.2-madvise.patch.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/ElectricFence-2.2.2-madvise.patch	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,54 @@
+--- ElectricFence-2.2.2/page.c.jj	1999-04-11 17:45:26.000000000 -0400
++++ ElectricFence-2.2.2/page.c	2004-10-16 12:30:10.000000000 -0400
+@@ -160,8 +160,9 @@ Page_DenyAccess(void * address, size_t s
+ void
+ Page_Delete(void * address, size_t size)
+ {
+-	if ( munmap((caddr_t)address, size) < 0 )
+-		Page_DenyAccess(address, size);
++	Page_DenyAccess(address, size);
++	/* Tell the kernel we will never need it again.  */
++	madvise(address, size, MADV_DONTNEED);
+ }
+ 
+ #if defined(_SC_PAGESIZE)
+--- ElectricFence-2.2.2/efence.c.jj	1999-04-12 21:00:49.000000000 -0400
++++ ElectricFence-2.2.2/efence.c	2004-10-16 13:11:30.000000000 -0400
+@@ -626,10 +626,7 @@ memalign(size_t alignment, size_t userSi
+ 		address += internalSize - bytesPerPage;
+ 
+ 		/* Set up the "dead" page. */
+-		if ( EF_PROTECT_FREE )
+-			Page_Delete(address, bytesPerPage);
+-		else
+-			Page_DenyAccess(address, bytesPerPage);
++		Page_Delete(address, bytesPerPage);
+ 
+ 		/* Figure out what address to give the user. */
+ 		address -= userSize;
+@@ -643,11 +640,8 @@ memalign(size_t alignment, size_t userSi
+ 		address = (char *)fullSlot->internalAddress;
+ 
+ 		/* Set up the "dead" page. */
+-		if ( EF_PROTECT_FREE )
+-			Page_Delete(address, bytesPerPage);
+-		else
+-			Page_DenyAccess(address, bytesPerPage);
+-			
++		Page_Delete(address, bytesPerPage);
++
+ 		address += bytesPerPage;
+ 
+ 		/* Set up the "live" page. */
+@@ -777,10 +771,7 @@ free(void * address)
+ 	 * in the hope that the swap space attached to those pages will be
+ 	 * released as well.
+ 	 */
+-	if ( EF_PROTECT_FREE )
+-	    Page_Delete(slot->internalAddress, slot->internalSize);
+-	else
+-	    Page_DenyAccess(slot->internalAddress, slot->internalSize);
++	Page_Delete(slot->internalAddress, slot->internalSize);
+ 
+ 	previousSlot = slotForInternalAddressPreviousTo(slot->internalAddress);
+ 	nextSlot = slotForInternalAddress(
--- electric-fence-2.2.2/patches/ElectricFence-2.1-vaarg.patch.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/ElectricFence-2.1-vaarg.patch	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,11 @@
+--- ElectricFence-2.1/print.c.jj	Thu Jan 19 23:54:26 1995
++++ ElectricFence-2.1/print.c	Tue May 16 07:43:45 2000
+@@ -99,7 +99,7 @@ vprint(const char * pattern, va_list arg
+ 				break;
+ 			case 'c':
+ 				{
+-					char	c = va_arg(args, char);
++					char	c = va_arg(args, int);
+ 					
+ 					(void) write(2, &c, 1);
+ 				}
--- electric-fence-2.2.2/patches/ElectricFence-2.2-disable-semaphore.diff.mib.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/ElectricFence-2.2-disable-semaphore.diff.mib	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,9 @@
+--- ElectricFence-2.2.2/Makefile~	1999-04-13 10:22:49.000000000 -0700
++++ ElectricFence-2.2.2/Makefile	2004-05-28 16:52:48.000000000 -0700
+@@ -1,5 +1,5 @@
+ PIC= -fPIC
+-CFLAGS= -g -DUSE_SEMAPHORE $(PIC)
++CFLAGS= -g $(PIC)
+ LIBS= -lpthread
+ 
+ prefix=/usr
--- electric-fence-2.2.2/patches/ElectricFence-2.2.2-pthread.patch.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/ElectricFence-2.2.2-pthread.patch	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,70 @@
+--- ElectricFence-2.2.2/efence.c.jj	1999-04-12 21:00:49.000000000 -0400
++++ ElectricFence-2.2.2/efence.c	2003-02-03 11:20:18.000000000 -0500
+@@ -174,6 +174,15 @@ static int		internalUse = 0;
+ static int		noAllocationListProtection = 0;
+ 
+ #ifdef USE_SEMAPHORE
++
++#include <stdbool.h>
++
++#pragma weak sem_init
++#pragma weak sem_post
++#pragma weak sem_wait
++
++static int		pthread_initialization = 0;
++
+ /*
+  * EF_sem is a semaphore used to allow one thread at a time into
+  * these routines.
+@@ -274,7 +283,7 @@ initialize(void)
+ 	EF_Print(version);
+ 
+ #ifdef USE_SEMAPHORE
+-	if (sem_init(&EF_sem, 0, 1) >= 0) {
++	if (sem_init != NULL && !pthread_initialization && sem_init(&EF_sem, 0, 1) >= 0) {
+ 		semEnabled = 1;
+ 	}
+ #endif
+@@ -397,6 +406,21 @@ initialize(void)
+ 	release();
+ }
+ 
++#ifdef USE_SEMAPHORE
++void
++__libc_malloc_pthread_startup (bool first_time)
++{
++	if (first_time) {
++		pthread_initialization = 1;
++		initialize ();
++	} else {
++		pthread_initialization = 0;
++		if (!semEnabled && sem_init != NULL && sem_init(&EF_sem, 0, 1) >= 0)
++			semEnabled = 1;
++	}
++}
++#endif
++
+ /*
+  * allocateMoreSlots is called when there are only enough slot structures
+  * left to support the allocation of a single malloc buffer.
+--- ElectricFence-2.2.2/Makefile.jj	1999-04-13 13:22:49.000000000 -0400
++++ ElectricFence-2.2.2/Makefile	2003-02-03 11:27:06.000000000 -0500
+@@ -1,6 +1,6 @@
+ PIC= -fPIC
+ CFLAGS= -g -DUSE_SEMAPHORE $(PIC)
+-LIBS= -lpthread
++LIBS=
+ 
+ prefix=/usr
+ BIN_INSTALL_DIR= $(prefix)/bin
+@@ -54,8 +54,8 @@ libefence.a: $(OBJECTS)
+ 	$(AR) crv libefence.a $(OBJECTS)
+ 
+ libefence.so.0.0: $(OBJECTS)
+-	gcc -g -shared -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \
+-		$(OBJECTS) -lpthread -lc 
++	gcc -shared -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \
++		$(CFLAGS) $(OBJECTS) 
+ 
+ tstheap: libefence.a tstheap.o
+ 	- rm -f tstheap
--- electric-fence-2.2.2/patches/ElectricFence-2.1-syserr.patch.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/ElectricFence-2.1-syserr.patch	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,26 @@
+--- ElectricFence-2.2.2/page.c~	2004-04-05 13:48:46.000000000 -0700
++++ ElectricFence-2.2.2/page.c	2004-04-05 13:49:00.000000000 -0700
+@@ -31,7 +31,7 @@
+ 
+ #if ( !defined(sgi) && !defined(_AIX) &&!defined(__USE_BSD))
+ extern int	sys_nerr;
+-extern char *	sys_errlist[];
++/* extern char *	sys_errlist[]; */
+ #endif
+ 
+ static const char *
+@@ -39,13 +39,8 @@
+ {
+ #if ( defined(sgi) )
+ 	return strerror(oserror());
+-#elif ( defined(_AIX) )
+-	return strerror(errno);
+ #else
+-	if ( errno > 0 && errno < sys_nerr )
+-		return sys_errlist[errno];
+-	else
+-		return "Unknown error.\n";
++	return strerror(errno);
+ #endif
+ }
+ 
--- electric-fence-2.2.2/patches/sys_nerr.diff.Darwin.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/sys_nerr.diff.Darwin	2022-05-09 13:51:02.330501249 -0700
@@ -0,0 +1,51 @@
+--- ElectricFence-2.2.2/page.c	Fri Aug 19 22:39:28 2005
++++ page.c	Fri Aug 19 22:39:49 2005
+@@ -30,7 +30,7 @@
+ static caddr_t	startAddr = (caddr_t) 0;
+ 
+ #if ( !defined(sgi) && !defined(_AIX) &&!defined(__USE_BSD))
+-extern int	sys_nerr;
++extern __const int	sys_nerr;
+ /* extern char *	sys_errlist[]; */
+ #endif
+ 
+--- ElectricFence-2.2.2/Makefile	Tue Apr 13 10:22:49 1999
++++ Makefile	Fri Aug 19 22:41:32 2005
+@@ -54,7 +54,7 @@
+ 	$(AR) crv libefence.a $(OBJECTS)
+ 
+ libefence.so.0.0: $(OBJECTS)
+-	gcc -g -shared -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \
++	gcc -g -Wl,-soname,libefence.so.0 -o libefence.so.0.0 \
+ 		$(OBJECTS) -lpthread -lc 
+ 
+ tstheap: libefence.a tstheap.o
+--- ElectricFence-2.2.2/Makefile	Fri Aug 19 22:56:01 2005
++++ Makefile	Fri Aug 19 22:57:11 2005
+@@ -16,7 +16,7 @@
+ 
+ OBJECTS= efence.o page.o print.o
+ 
+-all:	libefence.a libefence.so.0.0 tstheap eftest
++all:	libefence.a tstheap eftest
+ 	@ echo
+ 	@ echo "Testing Electric Fence."
+ 	@ echo "After the last test, it should print that the test has PASSED."
+@@ -29,16 +29,11 @@
+ install: libefence.a efence.3 libefence.so.0.0
+ 	$(INSTALL) -m 755 ef.sh $(BIN_INSTALL_DIR)/ef
+ 	$(INSTALL) -m 644 libefence.a $(LIB_INSTALL_DIR)
+-	$(INSTALL) -m 755 libefence.so.0.0 $(LIB_INSTALL_DIR)
+-	- rm -f $(LIB_INSTALL_DIR)/libefence.so.0
+-	ln -s libefence.so.0.0 $(LIB_INSTALL_DIR)/libefence.so.0
+-	- rm -f $(LIB_INSTALL_DIR)/libefence.so
+-	ln -s libefence.so.0.0 $(LIB_INSTALL_DIR)/libefence.so
+ 	$(INSTALL) -m 644 efence.3 $(MAN_INSTALL_DIR)/efence.3
+ 
+ clean:
+ 	- rm -f $(OBJECTS) tstheap.o eftest.o tstheap eftest \
+-	 libefence.a libefence.so.0.0 libefence.cat ElectricFence.shar
++	 libefence.a libefence.cat ElectricFence.shar
+ 
+ roff:
+ 	nroff -man < efence.3 > efence.cat
--- electric-fence-2.2.2/patches/pthread.diff.FreeBSD.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/pthread.diff.FreeBSD	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,33 @@
+--- ElectricFence-2/efence.c.orig	Mon Jan 13 17:24:08 2003
++++ ElectricFence-2/efence.c	Mon Jan 13 17:22:50 2003
+@@ -271,7 +271,9 @@
+ 	char *	string;
+ 	Slot *	slot;
+ 
++#if 0
+ 	EF_Print(version);
++#endif
+ 
+ #ifdef USE_SEMAPHORE
+ 	if (sem_init(&EF_sem, 0, 1) >= 0) {
+--- ElectricFence-2/page.c.orig	Sun Apr 11 14:45:26 1999
++++ ElectricFence-2/page.c	Sat Aug 26 18:19:58 2000
+@@ -29,7 +29,7 @@
+ 
+ static caddr_t	startAddr = (caddr_t) 0;
+ 
+-#if ( !defined(sgi) && !defined(_AIX) )
++#if ( !defined(sgi) && !defined(_AIX) && !(defined(BSD) && (BSD >= 199103)) )
+ extern int	sys_nerr;
+ /* extern char *	sys_errlist[]; */
+ #endif
+--- ElectricFence-2.1/Makefile.ori	Wed Nov 12 23:48:25 2003
++++ ElectricFence-2.1/Makefile	Wed Nov 12 23:48:50 2003
+@@ -5,6 +5,7 @@
+ MV= mv
+ CHMOD= chmod
+ CFLAGS= -g
++CFLAGS+=-DPAGE_PROTECTION_VIOLATED_SIGNAL=SIGBUS -pthread
+ LIB_INSTALL_DIR= /usr/lib
+ MAN_INSTALL_DIR= /usr/man/man3
+ 
--- electric-fence-2.2.2/patches/README.orig	1969-12-31 16:00:00.000000000 -0800
+++ electric-fence-2.2.2/patches/README	2022-05-09 13:51:02.326501411 -0700
@@ -0,0 +1,4 @@
+The following patches have been applied:
+patches/ElectricFence-2.0.5-longjmp.patch
+patches/ElectricFence-2.1-syserr.patch
+patches/ElectricFence-2.1-vaarg.patch
