WatchGuard patches to sources for i40e-1.4.25 as of
Mon May  9 13:54:12 PDT 2022
The patches shown here have been applied to source .tar.gz 
files supplied with the WatchGuard Open Source Archive.

==========================================================================
--- i40e-1.4.25/src/i40e/i40e_virtchnl_pf.h.orig	2022-05-09 13:54:11.982806285 -0700
+++ i40e-1.4.25/src/i40e/i40e_virtchnl_pf.h	2022-05-09 13:54:12.070802715 -0700
@@ -132,8 +132,13 @@
 
 /* VF configuration related iplink handlers */
 int i40e_ndo_set_vf_mac(struct net_device *netdev, int vf_id, u8 *mac);
+#ifdef	CONFIG_WG_KERNEL_4_14
+int i40e_ndo_set_vf_port_vlan(struct net_device *netdev,
+			      int vf_id, u16 vlan_id, u8 qos, __be16 proto);
+#else
 int i40e_ndo_set_vf_port_vlan(struct net_device *netdev,
 			      int vf_id, u16 vlan_id, u8 qos);
+#endif
 #ifdef HAVE_NDO_SET_VF_MIN_MAX_TX_RATE
 int i40e_ndo_set_vf_bw(struct net_device *netdev, int vf_id, int min_tx_rate,
 		       int max_tx_rate);
--- i40e-1.4.25/src/i40e/i40e_virtchnl_pf.c.orig	2022-05-09 13:54:11.982806285 -0700
+++ i40e-1.4.25/src/i40e/i40e_virtchnl_pf.c	2022-05-09 13:54:12.070802715 -0700
@@ -2154,8 +2154,13 @@
  *
  * program VF vlan id and/or qos
  **/
+#ifdef	CONFIG_WG_KERNEL_4_14
+int i40e_ndo_set_vf_port_vlan(struct net_device *netdev,
+			      int vf_id, u16 vlan_id, u8 qos, __be16 proto)
+#else
 int i40e_ndo_set_vf_port_vlan(struct net_device *netdev,
 			      int vf_id, u16 vlan_id, u8 qos)
+#endif
 {
 	u16 vlanprio = vlan_id | (qos << I40E_VLAN_PRIORITY_SHIFT);
 	struct i40e_netdev_priv *np = netdev_priv(netdev);
--- i40e-1.4.25/src/i40e/i40e_main.c.orig	2022-05-09 13:54:11.974806610 -0700
+++ i40e-1.4.25/src/i40e/i40e_main.c	2022-05-09 13:54:12.062803040 -0700
@@ -43,6 +43,10 @@
 #include <net/gre.h>
 #endif /* HAVE_GRE_ENCAP_OFFLOAD */
 
+#ifdef	CONFIG_WG_KERNEL_4_14 // WG:JB We don't need these even tho they're in 4.14
+#undef  HAVE_SETUP_TC
+#endif
+
 char i40e_driver_name[] = "i40e";
 static const char i40e_driver_string[] =
 		"Intel(R) 40-10 Gigabit Ethernet Connection Network Driver";
@@ -298,7 +302,11 @@
 		unsigned long trans_start;
 
 		q = netdev_get_tx_queue(netdev, i);
+#ifdef	CONFIG_WG_KERNEL_4_14
+		trans_start = q->trans_start;
+#else
 		trans_start = q->trans_start ? : netdev->trans_start;
+#endif
 		if (netif_xmit_stopped(q) && time_after(jiffies,
 			(trans_start + netdev->watchdog_timeo))) {
 			hung_queue = i;
@@ -427,10 +435,16 @@
 					     struct net_device *netdev,
 					     struct rtnl_link_stats64 *stats)
 #else
+#ifdef	CONFIG_WG_KERNEL_4_14
+void i40e_get_netdev_stats_struct(
+                                  struct net_device *netdev,
+                                  struct rtnl_link_stats64 *stats)
+#else
 static struct rtnl_link_stats64 *i40e_get_netdev_stats_struct(
 					     struct net_device *netdev,
 					     struct rtnl_link_stats64 *stats)
 #endif
+#endif
 {
 	struct i40e_netdev_priv *np = netdev_priv(netdev);
 	struct i40e_ring *tx_ring, *rx_ring;
@@ -439,10 +453,18 @@
 	int i;
 
 	if (test_bit(__I40E_DOWN, &vsi->state))
+#ifdef	CONFIG_WG_KERNEL_4_14
+		return;
+#else
 		return stats;
+#endif
 
 	if (!vsi->tx_rings)
+#ifdef	CONFIG_WG_KERNEL_4_14
+		return;
+#else
 		return stats;
+#endif
 
 	rcu_read_lock();
 	for (i = 0; i < vsi->num_queue_pairs; i++) {
@@ -483,7 +505,11 @@
 	stats->rx_crc_errors	= vsi_stats->rx_crc_errors;
 	stats->rx_length_errors	= vsi_stats->rx_length_errors;
 
+#ifdef	CONFIG_WG_KERNEL_4_14
+	return;
+#else
 	return stats;
+#endif
 }
 #else
 #ifdef I40E_FCOE
@@ -12020,6 +12046,13 @@
 #endif
 };
 
+#ifdef	CONFIG_WG_PLATFORM // WG:JB Make stubs if this is not defined
+#ifndef	CONFIG_CONFIGFS_FS
+#define	i40e_configfs_init()
+#define	i40e_configfs_exit()
+#endif
+#endif
+
 /**
  * i40e_init_module - Driver registration routine
  *
--- i40e-1.4.25/src/i40e/Makefile.orig	1969-12-31 16:00:00.000000000 -0800
+++ i40e-1.4.25/src/i40e/Makefile	2022-05-09 13:54:12.046803689 -0700
@@ -0,0 +1,425 @@
+################################################################################
+#
+# Intel 40 Gigabit PCI Express Linux driver
+# Copyright (c) 1999 - 2014 Intel Corporation.
+#
+# This program is free software; you can redistribute it and/or modify it
+# under the terms and conditions of the GNU General Public License,
+# version 2, as published by the Free Software Foundation.
+#
+# This program is distributed in the hope it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+# more details.
+#
+# The full GNU General Public License is included in this distribution in
+# the file called "COPYING".
+#
+# Contact Information:
+# Linux NICS <linux.nics@intel.com>
+# e1000-devel Mailing List <e1000-devel@lists.sourceforge.net>
+# Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497
+#
+################################################################################
+
+###########################################################################
+# Driver files
+
+# core driver files
+
+CFILES = i40e_main.c i40e_common.c i40e_adminq.c i40e_dcb.c i40e_diag.c \
+         i40e_hmc.c i40e_lan_hmc.c i40e_nvm.c i40e_txrx.c \
+         i40e_virtchnl_pf.c i40e_ethtool.c kcompat.c
+
+HFILES = i40e.h i40e_adminq_cmd.h i40e_adminq.h i40e_alloc.h i40e_dcb.h \
+         i40e_devids.h i40e_diag.h i40e_helper.h i40e_hmc.h i40e_lan_hmc.h \
+         i40e_osdep.h i40e_prototype.h i40e_register.h i40e_status.h \
+         i40e_txrx.h i40e_type.h i40e_virtchnl.h i40e_virtchnl_pf.h kcompat.h
+
+ifeq (,$(BUILD_KERNEL))
+BUILD_KERNEL=$(shell uname -r)
+endif
+
+DRIVER_NAME=i40e
+
+
+###########################################################################
+# Environment tests
+
+# Kernel Search Path
+# All the places we look for kernel source
+KSP :=  /lib/modules/$(BUILD_KERNEL)/build \
+        /lib/modules/$(BUILD_KERNEL)/source \
+        /usr/src/linux-$(BUILD_KERNEL) \
+        /usr/src/linux-$($(BUILD_KERNEL) | sed 's/-.*//') \
+        /usr/src/kernel-headers-$(BUILD_KERNEL) \
+        /usr/src/kernel-source-$(BUILD_KERNEL) \
+        /usr/src/linux-$($(BUILD_KERNEL) | sed 's/\([0-9]*\.[0-9]*\)\..*/\1/') \
+        /usr/src/linux
+
+# prune the list down to only values that exist
+# and have an include/linux sub-directory
+test_dir = $(shell [ -e $(dir)/include/linux ] && echo $(dir))
+KSP := $(foreach dir, $(KSP), $(test_dir))
+
+# we will use this first valid entry in the search path
+ifeq (,$(KSRC))
+  KSRC := $(firstword $(KSP))
+endif
+
+ifeq (,$(KSRC))
+  $(warning *** Kernel header files not in any of the expected locations.)
+  $(warning *** Install the appropriate kernel development package, e.g.)
+  $(error kernel-devel, for building kernel modules and try again)
+else
+ifeq (/lib/modules/$(BUILD_KERNEL)/source, $(KSRC))
+  KOBJ :=  /lib/modules/$(BUILD_KERNEL)/build
+else
+  KOBJ :=  $(KSRC)
+endif
+endif
+
+# Version file Search Path
+VSP :=  $(KOBJ)/include/generated/utsrelease.h \
+        $(KOBJ)/include/linux/utsrelease.h \
+        $(KOBJ)/include/linux/version.h \
+	$(KOBJ)/include/generated/uapi/linux/version.h \
+        /boot/vmlinuz.version.h
+
+# Config file Search Path
+CSP :=  $(KOBJ)/include/generated/autoconf.h \
+        $(KOBJ)/include/linux/autoconf.h \
+        /boot/vmlinuz.autoconf.h
+
+# prune the lists down to only files that exist
+test_file = $(shell [ -f $(file) ] && echo $(file))
+VSP := $(foreach file, $(VSP), $(test_file))
+CSP := $(foreach file, $(CSP), $(test_file))
+
+# and use the first valid entry in the Search Paths
+ifeq (,$(VERSION_FILE))
+  VERSION_FILE := $(firstword $(VSP))
+endif
+ifeq (,$(CONFIG_FILE))
+  CONFIG_FILE := $(firstword $(CSP))
+endif
+
+ifeq (,$(wildcard $(VERSION_FILE)))
+  $(error Linux kernel source not configured - missing version header file)
+endif
+
+ifeq (,$(wildcard $(CONFIG_FILE)))
+  $(error Linux kernel source not configured - missing autoconf.h)
+endif
+
+# pick a compiler
+ifneq (,$(findstring egcs-2.91.66, $(shell cat /proc/version)))
+  CC := kgcc gcc cc
+else
+  CC := gcc cc
+endif
+test_cc = $(shell $(cc) --version > /dev/null 2>&1 && echo $(cc))
+CC := $(foreach cc, $(CC), $(test_cc))
+CC := $(firstword $(CC))
+ifeq (,$(CC))
+  $(error Compiler not found)
+endif
+
+# we need to know what platform the driver is being built on
+# some additional features are only built on Intel platforms
+ARCH := $(shell uname -m | sed 's/i.86/i386/')
+ifeq ($(ARCH),alpha)
+  EXTRA_CFLAGS += -ffixed-8 -mno-fp-regs
+endif
+ifeq ($(ARCH),x86_64)
+  EXTRA_CFLAGS += -mcmodel=kernel -mno-red-zone
+endif
+ifeq ($(ARCH),ppc)
+  EXTRA_CFLAGS += -msoft-float
+endif
+ifeq ($(ARCH),ppc64)
+  EXTRA_CFLAGS += -m64 -msoft-float
+  LDFLAGS += -melf64ppc
+endif
+
+# extra flags for module builds
+EXTRA_CFLAGS += -DDRIVER_$(shell echo $(DRIVER_NAME) | tr '[a-z]' '[A-Z]')
+EXTRA_CFLAGS += -DDRIVER_NAME=$(DRIVER_NAME)
+EXTRA_CFLAGS += -DDRIVER_NAME_CAPS=$(shell echo $(DRIVER_NAME) | tr '[a-z]' '[A-Z]')
+# standard flags for module builds
+EXTRA_CFLAGS += -DLINUX -D__KERNEL__ -DMODULE -O2 -pipe -Wall
+EXTRA_CFLAGS += $(shell [ -d $(KSRC)/generated/uapi ] && \
+                        echo "$(KSRC)/generated/uapi")
+EXTRA_CFLAGS += -I$(KSRC)/include -I.
+EXTRA_CFLAGS += $(shell [ -f $(KSRC)/include/linux/modversions.h ] && \
+                        echo "-DMODVERSIONS -DEXPORT_SYMTAB \
+                              -include $(KSRC)/include/linux/modversions.h")
+
+# Some helper functions for converting kernel version to version codes
+get_kver = $(or $(word ${2},$(subst ., ,${1})),0)
+get_kvercode = $(shell [ "${1}" -ge 0 -a "${1}" -le 255 2>/dev/null ] && \
+                       [ "${2}" -ge 0 -a "${2}" -le 255 2>/dev/null ] && \
+                       [ "${3}" -ge 0 -a "${3}" -le 255 2>/dev/null ] && \
+                       printf %d $$(( ( ${1} << 16 ) + ( ${2} << 8 ) + ( ${3} ) )) )
+
+# The following command line parameter is intended for development of KCOMPAT
+# against upstream kernels such as net-next which have broken or non-updated
+# version codes in their Makefile. They are intended for debugging and
+# development purpose only so that we can easily test new KCOMPAT early. If you
+# don't know what this means, you do not need to set this flag. There is no
+# arcane magic here.
+
+# Convert LINUX_VERSION into LINUX_VERSION_CODE
+ifneq (${LINUX_VERSION},)
+  LINUX_VERSION_CODE=$(call get_kvercode,$(call get_kver,${LINUX_VERSION},1),$(call get_kver,${LINUX_VERSION},2),$(call get_kver,${LINUX_VERSION},3))
+endif
+
+# Honor LINUX_VERSION_CODE
+ifneq (${LINUX_VERSION_CODE},)
+  $(warning Forcing target kernel's LINUX_VERSION_CODE to ${LINUX_VERSION_CODE}$(if ${LINUX_VERSION}, from LINUX_VERSION=${LINUX_VERSION}). Do this at your owk risk.)
+  KVER_CODE := ${LINUX_VERSION_CODE}
+  EXTRA_CFLAGS += -DLINUX_VERSION_CODE=${LINUX_VERSION_CODE}
+endif
+
+EXTRA_CFLAGS += $(CFLAGS_EXTRA)
+
+RHC := $(KSRC)/include/linux/rhconfig.h
+ifneq (,$(wildcard $(RHC)))
+  # 7.3 typo in rhconfig.h
+  ifneq (,$(shell $(CC) $(CFLAGS) -E -dM $(RHC) | grep __module__bigmem))
+	EXTRA_CFLAGS += -D__module_bigmem
+  endif
+endif
+
+# get the kernel version - we use this to find the correct install path
+KVER := $(shell $(CC) $(EXTRA_CFLAGS) -E -dM $(VERSION_FILE) | grep UTS_RELEASE | \
+        awk '{ print $$3 }' | sed 's/\"//g')
+
+# assume source symlink is the same as build, otherwise adjust KOBJ
+ifneq (,$(wildcard /lib/modules/$(KVER)/build))
+ifneq ($(KSRC),$(shell readlink /lib/modules/$(KVER)/build))
+  KOBJ=/lib/modules/$(KVER)/build
+endif
+endif
+
+ifeq (${KVER_CODE},)
+  KVER_CODE := $(shell $(CC) $(EXTRA_CFLAGS) -E -dM $(VSP) 2>/dev/null |\
+                 grep -m 1 LINUX_VERSION_CODE | awk '{ print $$3 }' | sed 's/\"//g')
+endif
+
+ifeq ($(strip $(KVER_CODE)),)
+KVER_CODE := 0
+endif
+
+RHEL_CODE := $(shell $(CC) $(EXTRA_CFLAGS) -E -dM $(VSP) 2>/dev/null |\
+	grep -m 1 RHEL_RELEASE_CODE | awk '{ print $$3 }')
+
+ifeq ($(strip $(RHEL_CODE)),)
+RHEL_CODE := 0
+endif
+
+# abort the build on kernels older than 2.4.0
+ifneq (1,$(shell [ $(KVER_CODE) -ge 132096 ] && echo 1 || echo 0))
+  $(error *** Aborting the build. \
+          *** This driver is not supported on kernel versions older than 2.4.0)
+endif
+
+# Add DCB netlink source if our kernel is 2.6.23 or newer
+ifeq (1,$(shell [ $(KVER_CODE) -ge 132631 ] && echo 1 || echo 0))
+  CFILES += i40e_dcb_nl.c
+endif
+
+# Add FCoE source if FCoE is supported by the kernel
+FCOE := $(shell grep -wE 'CONFIG_FCOE|CONFIG_FCOE_MODULE' $(CONFIG_FILE) | \
+	awk '{print $$3}')
+ifeq ($(FCOE), 1)
+  CFILES += i40e_fcoe.c
+  HFILES += i40e_fcoe.h
+endif
+
+# Add Debug FS source if DEBUG_FS is supported by the kernel
+DEBUGFS := $(shell grep -wE 'CONFIG_DEBUG_FS' $(CONFIG_FILE) | \
+	awk '{print $$3}')
+ifeq ($(DEBUGFS), 1)
+  CFILES += i40e_debugfs.c
+endif
+
+# Add Config FS source if CONFIGFS_FS is supported by the kernel
+CONFIGFS := $(shell grep -wE 'CONFIG_CONFIGFS_FS' $(CONFIG_FILE) | \
+	awk '{print $$3}')
+ifeq ($(CONFIGFS), 1)
+  CFILES += i40e_configfs.c
+endif
+
+# Use NO_PTP_SUPPORT flag to disable IEEE-1588 PTP (Documented in README)
+ifneq ($(filter %NO_PTP_SUPPORT,$(CFLAGS_EXTRA)),-DNO_PTP_SUPPORT)
+# Do not attempt to enable PTP in kernels which do not have support
+ifeq (1,$(shell ([ $(KVER_CODE) -ge 196608 ] || [ $(RHEL_CODE) -ge 1540 ]) && echo 1 || echo 0))
+include $(KOBJ)/include/config/auto.conf
+ifdef CONFIG_PTP_1588_CLOCK
+CFILES += i40e_ptp.c
+endif # CONFIG_PTP_1588_CLOCK
+endif # kernel version >= 3.0
+endif # !NO_PTP_SUPPORT
+
+# set the install path before and after 3.2.0
+ifeq (1,$(shell [ $(KVER_CODE) -lt 197120 ] && echo 1 || echo 0))
+INSTDIR := /lib/modules/$(KVER)/kernel/drivers/net/$(DRIVER_NAME)
+else
+INSTDIR := /lib/modules/$(KVER)/kernel/drivers/net/ethernet/intel/$(DRIVER_NAME)
+endif
+
+# look for SMP in config.h
+SMP := $(shell $(CC) $(EXTRA_CFLAGS) -E -dM $(CONFIG_FILE) | \
+         grep -w CONFIG_SMP | awk '{ print $$3 }')
+ifneq ($(SMP),1)
+  SMP := 0
+endif
+
+ifneq ($(SMP),$(shell uname -a | grep SMP > /dev/null 2>&1 && echo 1 || echo 0))
+  $(warning ***)
+  ifeq ($(SMP),1)
+    $(warning *** Warning: kernel source configuration (SMP))
+    $(warning *** does not match running kernel (UP))
+  else
+    $(warning *** Warning: kernel source configuration (UP))
+    $(warning *** does not match running kernel (SMP))
+  endif
+  $(warning *** Continuing with build,)
+  $(warning *** resulting driver may not be what you want)
+  $(warning ***)
+endif
+
+ifeq ($(SMP),1)
+  EXTRA_CFLAGS += -D__SMP__
+endif
+
+
+###########################################################################
+# Kernel Version Specific rules
+
+ifeq (1,$(shell [ $(KVER_CODE) -ge 132352 ] && echo 1 || echo 0))
+
+# Makefile for 2.5.x and newer kernel
+TARGET = $(DRIVER_NAME).ko
+
+# man page
+MANSECTION = 7
+MANFILE = $(TARGET:.ko=.$(MANSECTION))
+
+ifneq ($(PATCHLEVEL),)
+EXTRA_CFLAGS += $(CFLAGS_EXTRA)
+obj-m += $(DRIVER_NAME).o
+$(DRIVER_NAME)-objs := $(CFILES:.c=.o)
+else
+default:
+ifeq ($(KOBJ),$(KSRC))
+	$(MAKE) -C $(KSRC) SUBDIRS=$(shell pwd) modules
+else
+	$(MAKE) -C $(KSRC) O=$(KOBJ) SUBDIRS=$(shell pwd) modules
+endif
+endif
+
+else # ifeq (1,$(shell [ $(KVER_CODE) -ge 132352 ] && echo 1 || echo 0))
+
+# Makefile for 2.4.x kernel
+TARGET = $(DRIVER_NAME).o
+
+# man page
+MANSECTION = 7
+MANFILE = $(TARGET:.o=.$(MANSECTION))
+
+# Get rid of compile warnings in kernel header files from SuSE
+ifneq (,$(wildcard /etc/SuSE-release))
+  EXTRA_CFLAGS += -Wno-sign-compare -fno-strict-aliasing
+endif
+
+# Get rid of compile warnings in kernel header files from fedora
+ifneq (,$(wildcard /etc/fedora-release))
+  EXTRA_CFLAGS += -fno-strict-aliasing
+endif
+CFLAGS += $(EXTRA_CFLAGS)
+
+.SILENT: $(TARGET)
+$(TARGET): $(filter-out $(TARGET), $(CFILES:.c=.o))
+	$(LD) $(LDFLAGS) -r $^ -o $@
+	echo; echo
+	echo "**************************************************"
+	echo "** $(TARGET) built for $(KVER)"
+	echo -n "** SMP               "
+	if [ "$(SMP)" = "1" ]; \
+		then echo "Enabled"; else echo "Disabled"; fi
+	echo "**************************************************"
+	echo
+
+$(CFILES:.c=.o): $(HFILES) Makefile
+default:
+	$(MAKE)
+
+endif # ifeq (1,$(shell [ $(KVER_CODE) -ge 132352 ] && echo 1 || echo 0))
+
+ifeq (,$(MANDIR))
+  # find the best place to install the man page
+  MANPATH := $(shell (manpath 2>/dev/null || echo $MANPATH) | sed 's/:/ /g')
+  ifneq (,$(MANPATH))
+    # test based on inclusion in MANPATH
+    test_dir = $(findstring $(dir), $(MANPATH))
+  else
+    # no MANPATH, test based on directory existence
+    test_dir = $(shell [ -e $(dir) ] && echo $(dir))
+  endif
+  # our preferred install path
+  # should /usr/local/man be in here ?
+  MANDIR := /usr/share/man /usr/man
+  MANDIR := $(foreach dir, $(MANDIR), $(test_dir))
+  MANDIR := $(firstword $(MANDIR))
+endif
+ifeq (,$(MANDIR))
+  # fallback to /usr/man
+  MANDIR := /usr/man
+endif
+
+# depmod version for rpm builds
+DEPVER := $(shell /sbin/depmod -V 2>/dev/null | \
+          awk 'BEGIN {FS="."} NR==1 {print $$2}')
+
+###########################################################################
+# Build rules
+
+$(MANFILE).gz: ../$(MANFILE)
+	gzip -c $< > $@
+
+install: default $(MANFILE).gz
+	# remove all old versions of the driver
+	find $(INSTALL_MOD_PATH)/lib/modules/$(KVER) -name $(TARGET) -exec rm -f {} \; || true
+	find $(INSTALL_MOD_PATH)/lib/modules/$(KVER) -name $(TARGET).gz -exec rm -f {} \; || true
+	install -D -m 644 $(TARGET) $(INSTALL_MOD_PATH)$(INSTDIR)/$(TARGET)
+ifeq (,$(INSTALL_MOD_PATH))
+	/sbin/depmod -a $(KVER) || true
+else
+  ifeq ($(DEPVER),1 )
+	/sbin/depmod -r $(INSTALL_MOD_PATH) -a $(KVER) || true
+  else
+	/sbin/depmod -b $(INSTALL_MOD_PATH) -a -n $(KVER) > /dev/null || true
+  endif
+endif
+	install -D -m 644 $(MANFILE).gz $(INSTALL_MOD_PATH)$(MANDIR)/man$(MANSECTION)/$(MANFILE).gz
+
+uninstall:
+	if [ -e $(INSTDIR)/$(TARGET) ] ; then \
+	    rm -f $(INSTDIR)/$(TARGET) ; \
+	fi
+	/sbin/depmod -a
+	if [ -e $(MANDIR)/man$(MANSECTION)/$(MANFILE).gz ] ; then \
+		rm -f $(MANDIR)/man$(MANSECTION)/$(MANFILE).gz ; \
+	fi
+
+.PHONY: clean install
+
+clean:
+ifeq ($(KOBJ),$(KSRC))
+	$(MAKE) -C $(KSRC) SUBDIRS=$(shell pwd) clean
+else
+	$(MAKE) -C $(KSRC) O=$(KOBJ) SUBDIRS=$(shell pwd) clean
+endif
+	rm -rf $(TARGET) $(TARGET:.ko=.o) $(TARGET:.ko=.mod.c) $(TARGET:.ko=.mod.o) $(CFILES:.c=.o) $(MANFILE).gz .*cmd .tmp_versions
