WatchGuard patches to sources for binutils-2.30 as of
Mon May  9 13:32:51 PDT 2022
The patches shown here have been applied to source .tar.gz 
files supplied with the WatchGuard Open Source Archive.

==========================================================================
--- binutils-2.30/ltmain.sh.orig	2022-05-09 13:30:57.743483548 -0700
+++ binutils-2.30/ltmain.sh	2022-05-09 13:31:09.123022770 -0700
@@ -6001,7 +6001,8 @@
 	      fi
 	    else
 	      # We cannot seem to hardcode it, guess we'll fake it.
-	      add_dir="-L$libdir"
+	      # WG: don't fake it this introduces host pollution
+	      # add_dir="-L$libdir"
 	      # Try looking first in the location we're being installed to.
 	      if test -n "$inst_prefix_dir"; then
 		case $libdir in
--- binutils-2.30/binutils/configure.ac.orig	2022-05-09 13:30:51.235747055 -0700
+++ binutils-2.30/binutils/configure.ac	2022-05-09 13:31:01.743321587 -0700
@@ -87,7 +87,10 @@
 fi
 
 AC_PROG_YACC
+save_LIBS=$LIBS
 AM_PROG_LEX
+LIBS=$save_LIBS
+LEXLIB=
 
 ALL_LINGUAS="bg da es fi fr id it ja ro ru rw sk sv tr uk vi zh_CN zh_TW hr ca"
 ZW_GNU_GETTEXT_SISTER_DIR
--- binutils-2.30/binutils/configure.orig	2022-05-09 13:30:51.235747055 -0700
+++ binutils-2.30/binutils/configure	2022-05-09 13:31:01.743321587 -0700
@@ -12150,6 +12150,7 @@
 done
 test -n "$YACC" || YACC="yacc"
 
+save_LIBS=$LIBS
 for ac_prog in flex lex
 do
   # Extract the first word of "$ac_prog", so it can be a program name with args.
@@ -12311,6 +12312,8 @@
 if test "$LEX" = :; then
   LEX=${am_missing_run}flex
 fi
+LIBS=$save_LIBS
+LEXLIB=
 
 ALL_LINGUAS="bg da es fi fr id it ja ro ru rw sk sv tr uk vi zh_CN zh_TW hr ca"
 # If we haven't got the data from the intl directory,
--- binutils-2.30/ld/ldmain.c.orig	2022-05-09 13:30:56.239544444 -0700
+++ binutils-2.30/ld/ldmain.c	2022-05-09 13:31:08.223059211 -0700
@@ -261,6 +261,8 @@
   command_line.warn_mismatch = TRUE;
   command_line.warn_search_mismatch = TRUE;
   command_line.check_section_addresses = -1;
+  command_line.poison_system_directories = TRUE;
+  command_line.error_poison_system_directories = FALSE;
 
   /* We initialize DEMANGLING based on the environment variable
      COLLECT_NO_DEMANGLE.  The gcc collect2 program will demangle the
--- binutils-2.30/ld/emultempl/elf32.em.orig	2022-05-09 13:30:56.163547522 -0700
+++ binutils-2.30/ld/emultempl/elf32.em	2022-05-09 13:31:08.139062612 -0700
@@ -1470,6 +1470,8 @@
 	      && command_line.rpath == NULL)
 	    {
 	      path = (const char *) getenv ("LD_RUN_PATH");
+	      if ((path) && (strlen (path) == 0))
+	      	path = NULL;
 	      if (path
 		  && gld${EMULATION_NAME}_search_needed (path, &n, force))
 		break;
@@ -1750,6 +1752,8 @@
   rpath = command_line.rpath;
   if (rpath == NULL)
     rpath = (const char *) getenv ("LD_RUN_PATH");
+  if ((rpath) && (*rpath == '\0'))
+  	rpath = NULL;
 
   for (abfd = link_info.input_bfds; abfd; abfd = abfd->link.next)
     if (bfd_get_flavour (abfd) == bfd_target_elf_flavour)
--- binutils-2.30/ld/ld.texinfo.orig	2022-05-09 13:30:56.203545902 -0700
+++ binutils-2.30/ld/ld.texinfo	2022-05-09 13:31:08.183060831 -0700
@@ -2498,6 +2498,18 @@
 
 Passing @code{none} for @var{style} disables the setting from any
 @code{--build-id} options earlier on the command line.
+
+@kindex --no-poison-system-directories
+@item --no-poison-system-directories
+Do not warn for @option{-L} options using system directories such as
+@file{/usr/lib} when cross linking.  This option is intended for use
+in chroot environments when such directories contain the correct
+libraries for the target system rather than the host.
+
+@kindex --error-poison-system-directories
+@item --error-poison-system-directories
+Give an error instead of a warning for @option{-L} options using
+system directories when cross linking.
 @end table
 
 @c man end
--- binutils-2.30/ld/ldfile.c.orig	2022-05-09 13:30:56.207545739 -0700
+++ binutils-2.30/ld/ldfile.c	2022-05-09 13:31:08.195060345 -0700
@@ -116,6 +116,23 @@
     new_dirs->name = concat (ld_sysroot, name + strlen ("$SYSROOT"), (const char *) NULL);
   else
     new_dirs->name = xstrdup (name);
+
+#ifdef ENABLE_POISON_SYSTEM_DIRECTORIES
+  if (command_line.poison_system_directories
+  && ((!strncmp (name, "/lib", 4))
+      || (!strncmp (name, "/usr/lib", 8))
+      || (!strncmp (name, "/usr/local/lib", 14))
+      || (!strncmp (name, "/usr/X11R6/lib", 14))))
+   {
+     if (command_line.error_poison_system_directories)
+       einfo (_("%X%P: error: library search path \"%s\" is unsafe for "
+            "cross-compilation\n"), name);
+     else
+       einfo (_("%P: warning: library search path \"%s\" is unsafe for "
+            "cross-compilation\n"), name);
+   }
+#endif
+
 }
 
 /* Try to open a BFD for a lang_input_statement.  */
@@ -338,18 +355,25 @@
      directory first.  */
   if (!entry->flags.maybe_archive)
     {
-      if (entry->flags.sysrooted && IS_ABSOLUTE_PATH (entry->filename))
+      /* For absolute pathnames, try to always open the file in the
+	 sysroot first. If this fails, try to open the file at the
+	 given location.  */
+      entry->flags.sysrooted = is_sysrooted_pathname (entry->filename);
+      if (!entry->flags.sysrooted && IS_ABSOLUTE_PATH (entry->filename)
+	  && ld_sysroot)
 	{
 	  char *name = concat (ld_sysroot, entry->filename,
 			       (const char *) NULL);
 	  if (ldfile_try_open_bfd (name, entry))
 	    {
 	      entry->filename = name;
+	      entry->flags.sysrooted = TRUE;
 	      return TRUE;
 	    }
 	  free (name);
 	}
-      else if (ldfile_try_open_bfd (entry->filename, entry))
+
+      if (ldfile_try_open_bfd (entry->filename, entry))
 	return TRUE;
 
       if (IS_ABSOLUTE_PATH (entry->filename))
--- binutils-2.30/ld/configure.ac.orig	2022-05-09 13:30:56.115549465 -0700
+++ binutils-2.30/ld/configure.ac	2022-05-09 13:31:08.007067957 -0700
@@ -95,6 +95,16 @@
 AC_SUBST(TARGET_SYSTEM_ROOT)
 AC_SUBST(TARGET_SYSTEM_ROOT_DEFINE)
 
+AC_ARG_ENABLE([poison-system-directories],
+         AS_HELP_STRING([--enable-poison-system-directories],
+                [warn for use of native system library directories]),,
+         [enable_poison_system_directories=no])
+if test "x${enable_poison_system_directories}" = "xyes"; then
+  AC_DEFINE([ENABLE_POISON_SYSTEM_DIRECTORIES],
+       [1],
+       [Define to warn for use of native system library directories])
+fi
+
 dnl Use --enable-gold to decide if this linker should be the default.
 dnl "install_as_default" is set to false if gold is the default linker.
 dnl "installed_linker" is the installed BFD linker name.
@@ -234,7 +244,10 @@
 AC_EXEEXT
 
 AC_PROG_YACC
+save_LIBS=$LIBS
 AM_PROG_LEX
+LIBS=$save_LIBS
+LEXLIB=
 
 AM_MAINTAINER_MODE
 AM_CONDITIONAL(GENINSRC_NEVER, false)
--- binutils-2.30/ld/ldlex.h.orig	2022-05-09 13:30:56.239544444 -0700
+++ binutils-2.30/ld/ldlex.h	2022-05-09 13:31:08.223059211 -0700
@@ -147,6 +147,8 @@
   OPTION_REQUIRE_DEFINED_SYMBOL,
   OPTION_ORPHAN_HANDLING,
   OPTION_FORCE_GROUP_ALLOCATION,
+  OPTION_NO_POISON_SYSTEM_DIRECTORIES,
+  OPTION_ERROR_POISON_SYSTEM_DIRECTORIES,
 };
 
 /* The initial parser states.  */
--- binutils-2.30/ld/Makefile.in.orig	2022-05-09 13:30:56.091550436 -0700
+++ binutils-2.30/ld/Makefile.in	2022-05-09 13:31:07.951070225 -0700
@@ -446,7 +446,7 @@
 # We put the scripts in the directory $(scriptdir)/ldscripts.
 # We can't put the scripts in $(datadir) because the SEARCH_DIR
 # directives need to be different for native and cross linkers.
-scriptdir = $(tooldir)/lib
+scriptdir = $(libdir)
 BASEDIR = $(srcdir)/..
 BFDDIR = $(BASEDIR)/bfd
 INCDIR = $(BASEDIR)/include
--- binutils-2.30/ld/Makefile.am.orig	2022-05-09 13:30:56.083550760 -0700
+++ binutils-2.30/ld/Makefile.am	2022-05-09 13:31:07.947070386 -0700
@@ -57,7 +57,7 @@
 # We put the scripts in the directory $(scriptdir)/ldscripts.
 # We can't put the scripts in $(datadir) because the SEARCH_DIR
 # directives need to be different for native and cross linkers.
-scriptdir = $(tooldir)/lib
+scriptdir = $(libdir)
 
 EMUL = @EMUL@
 EMULATION_OFILES = @EMULATION_OFILES@
--- binutils-2.30/ld/ld.h.orig	2022-05-09 13:30:56.187546549 -0700
+++ binutils-2.30/ld/ld.h	2022-05-09 13:31:08.151062127 -0700
@@ -175,6 +175,14 @@
   /* If set, display the target memory usage (per memory region).  */
   bfd_boolean print_memory_usage;
 
+  /* If TRUE (the default) warn for uses of system directories when
+     cross linking.  */
+  bfd_boolean poison_system_directories;
+
+  /* If TRUE (default FALSE) give an error for uses of system
+     directories when cross linking instead of a warning.  */
+  bfd_boolean error_poison_system_directories;
+
   /* Should we force section groups to be resolved?  Controlled with
      --force-group-allocation on the command line or FORCE_GROUP_ALLOCATION
      in the linker script.  */
--- binutils-2.30/ld/config.in.orig	2022-05-09 13:30:56.091550436 -0700
+++ binutils-2.30/ld/config.in	2022-05-09 13:31:07.955070062 -0700
@@ -27,6 +27,9 @@
    language is requested. */
 #undef ENABLE_NLS
 
+/* Define to warn for use of native system library directories */
+#undef ENABLE_POISON_SYSTEM_DIRECTORIES
+
 /* Additional extension a shared object might have. */
 #undef EXTRA_SHLIB_EXTENSION
 
--- binutils-2.30/ld/configure.orig	2022-05-09 13:30:56.111549626 -0700
+++ binutils-2.30/ld/configure	2022-05-09 13:31:08.007067957 -0700
@@ -785,6 +785,7 @@
 enable_targets
 enable_64_bit_bfd
 with_sysroot
+enable_poison_system_directories
 enable_gold
 enable_got
 enable_compressed_debug_sections
@@ -1444,6 +1445,8 @@
   --disable-largefile     omit support for large files
   --enable-targets        alternative target configurations
   --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)
+  --enable-poison-system-directories
+                          warn for use of native system library directories
   --enable-gold[=ARG]     build gold [ARG={default,yes,no}]
   --enable-got=<type>     GOT handling scheme (target, single, negative,
                           multigot)
@@ -15500,7 +15503,18 @@
 fi
 
 
+# Check whether --enable-poison-system-directories was given.
+if test "${enable_poison_system_directories+set}" = set; then :
+  enableval=$enable_poison_system_directories;
+else
+  enable_poison_system_directories=no
+fi
+
+if test "x${enable_poison_system_directories}" = "xyes"; then
 
+$as_echo "#define ENABLE_POISON_SYSTEM_DIRECTORIES 1" >>confdefs.h
+
+fi
 
 # Check whether --enable-got was given.
 if test "${enable_got+set}" = set; then :
@@ -16222,6 +16236,7 @@
 done
 test -n "$YACC" || YACC="yacc"
 
+save_LIBS=$LIBS
 for ac_prog in flex lex
 do
   # Extract the first word of "$ac_prog", so it can be a program name with args.
@@ -16383,6 +16398,8 @@
 if test "$LEX" = :; then
   LEX=${am_missing_run}flex
 fi
+LIBS=$save_LIBS
+LEXLIB=
 
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to enable maintainer-specific portions of Makefiles" >&5
--- binutils-2.30/ld/lexsup.c.orig	2022-05-09 13:30:56.243544283 -0700
+++ binutils-2.30/ld/lexsup.c	2022-05-09 13:31:08.227059050 -0700
@@ -538,6 +538,14 @@
   { {"orphan-handling", required_argument, NULL, OPTION_ORPHAN_HANDLING},
     '\0', N_("=MODE"), N_("Control how orphan sections are handled."),
     TWO_DASHES },
+  { {"no-poison-system-directories", no_argument, NULL,
+    OPTION_NO_POISON_SYSTEM_DIRECTORIES},
+    '\0', NULL, N_("Do not warn for -L options using system directories"),
+    TWO_DASHES },
+  { {"error-poison-system-directories", no_argument, NULL,
+    OPTION_ERROR_POISON_SYSTEM_DIRECTORIES},
+    '\0', NULL, N_("Give an error for -L options using system directories"),
+    TWO_DASHES },
 };
 
 #define OPTION_COUNT ARRAY_SIZE (ld_options)
@@ -550,6 +558,7 @@
   int ingroup = 0;
   char *default_dirlist = NULL;
   char *shortopts;
+  char *BR_paranoid_env;
   struct option *longopts;
   struct option *really_longopts;
   int last_optind;
@@ -1534,6 +1543,14 @@
 	  }
 	  break;
 
+	case OPTION_NO_POISON_SYSTEM_DIRECTORIES:
+	  command_line.poison_system_directories = FALSE;
+	  break;
+
+	case OPTION_ERROR_POISON_SYSTEM_DIRECTORIES:
+	  command_line.error_poison_system_directories = TRUE;
+	  break;
+
 	case OPTION_PUSH_STATE:
 	  input_flags.pushed = xmemdup (&input_flags,
 					sizeof (input_flags),
@@ -1577,6 +1594,10 @@
       command_line.soname = NULL;
     }
 
+  BR_paranoid_env = getenv("BR_COMPILER_PARANOID_UNSAFE_PATH");
+  if (BR_paranoid_env && strlen(BR_paranoid_env) > 0)
+    command_line.error_poison_system_directories = TRUE;
+
   while (ingroup)
     {
       lang_leave_group ();
--- binutils-2.30/gas/configure.orig	2022-05-09 13:30:51.719727458 -0700
+++ binutils-2.30/gas/configure	2022-05-09 13:31:03.783238988 -0700
@@ -13003,6 +13003,7 @@
 done
 test -n "$YACC" || YACC="yacc"
 
+save_LIBS=$LIBS
 for ac_prog in flex lex
 do
   # Extract the first word of "$ac_prog", so it can be a program name with args.
@@ -13164,6 +13165,8 @@
 if test "$LEX" = :; then
   LEX=${am_missing_run}flex
 fi
+LIBS=$save_LIBS
+LEXLIB=
 
 ALL_LINGUAS="fr tr es rw id ru fi ja zh_CN sv"
 # If we haven't got the data from the intl directory,
--- binutils-2.30/gas/configure.ac.orig	2022-05-09 13:30:51.719727458 -0700
+++ binutils-2.30/gas/configure.ac	2022-05-09 13:31:03.783238988 -0700
@@ -795,7 +795,10 @@
 AC_DEFINE_UNQUOTED(TARGET_OS,		"${target_os}",    [Target OS.])
 
 AC_PROG_YACC
+save_LIBS=$LIBS
 AM_PROG_LEX
+LIBS=$save_LIBS
+LEXLIB=
 
 ALL_LINGUAS="fr tr es rw id ru fi ja zh_CN sv"
 ZW_GNU_GETTEXT_SISTER_DIR
