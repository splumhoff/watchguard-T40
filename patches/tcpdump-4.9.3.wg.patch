WatchGuard patches to sources for tcpdump-4.9.3 as of
Mon May  9 14:01:58 PDT 2022
The patches shown here have been applied to source .tar.gz 
files supplied with the WatchGuard Open Source Archive.

==========================================================================
--- tcpdump-4.9.3/tcpdump.c.orig	2022-05-09 14:01:50.048226701 -0700
+++ tcpdump-4.9.3/tcpdump.c	2022-05-09 14:01:51.060185661 -0700
@@ -230,6 +230,7 @@
 	char	*CurrentFileName;
 	pcap_t	*pd;
 	pcap_dumper_t *p;
+	netdissect_options *ndo;
 #ifdef HAVE_CAPSICUM
 	int	dirfd;
 #endif
@@ -514,7 +515,7 @@
 #define Q_FLAG
 #endif
 
-#define SHORTOPTS "aAb" B_FLAG "c:C:d" D_FLAG "eE:fF:G:hHi:" I_FLAG j_FLAG J_FLAG "KlLm:M:nNOpq" Q_FLAG "r:s:StT:u" U_FLAG "vV:w:W:xXy:Yz:Z:#"
+#define SHORTOPTS "aAb" B_FLAG "c:C:d" D_FLAG "eE:fF:G:hHi:" I_FLAG j_FLAG J_FLAG "KlLm:M:nNOpPq" Q_FLAG "r:s:StT:u" U_FLAG "vV:w:W:xXy:Yz:Z:#"
 
 /*
  * Long options.
@@ -539,6 +540,7 @@
 #define OPTION_VERSION		128
 #define OPTION_TSTAMP_PRECISION	129
 #define OPTION_IMMEDIATE_MODE	130
+#define OPTION_PRINT		'P'
 
 static const struct option longopts[] = {
 #if defined(HAVE_PCAP_CREATE) || defined(_WIN32)
@@ -578,6 +580,7 @@
 #endif
 	{ "relinquish-privileges", required_argument, NULL, 'Z' },
 	{ "number", no_argument, NULL, '#' },
+	{ "print", no_argument, NULL, OPTION_PRINT },
 	{ "version", no_argument, NULL, OPTION_VERSION },
 	{ NULL, 0, NULL, 0 }
 };
@@ -1101,7 +1104,7 @@
 main(int argc, char **argv)
 {
 	register int cnt, op, i;
-	bpf_u_int32 localnet =0 , netmask = 0;
+	bpf_u_int32 localnet = 0, netmask = 0;
 	int timezone_offset = 0;
 	register char *cp, *infile, *cmdbuf, *device, *RFileName, *VFileName, *WFileName;
 	pcap_handler callback;
@@ -1132,6 +1135,7 @@
 	int Oflag = 1;			/* run filter code optimizer */
 	int yflag_dlt = -1;
 	const char *yflag_dlt_name = NULL;
+	int print = 0;
 
 	netdissect_options Ndo;
 	netdissect_options *ndo = &Ndo;
@@ -1511,6 +1515,10 @@
 			break;
 #endif
 
+		case OPTION_PRINT:
+			print = 1;
+			break;
+
 		default:
 			print_usage();
 			exit_tcpdump(1);
@@ -1549,11 +1557,14 @@
 #ifdef HAVE_PCAP_SET_IMMEDIATE_MODE
 	/*
 	 * If we're printing dissected packets to the standard output
-	 * rather than saving raw packets to a file, and the standard
-	 * output is a terminal, use immediate mode, as the user's
-	 * probably expecting to see packets pop up immediately.
+	 * and the standard output is a terminal, use immediate mode,
+	 * as the user's probably expecting to see packets pop up
+	 * immediately.
+	 *
+	 * XXX - set the timeout to a lower value, instead?  If so,
+	 * what value would be appropriate?
 	 */
-	if (WFileName == NULL && isatty(1))
+	if ((WFileName == NULL || print) && isatty(1))
 		immediate_mode = 1;
 #endif
 
@@ -1932,8 +1943,18 @@
 			pcap_userdata = (u_char *)&dumpinfo;
 		} else {
 			callback = dump_packet;
-			pcap_userdata = (u_char *)p;
+			dumpinfo.WFileName = WFileName;
+			dumpinfo.pd = pd;
+			dumpinfo.p = p;
+			pcap_userdata = (u_char *)&dumpinfo;
 		}
+		if (print) {
+			dlt = pcap_datalink(pd);
+			ndo->ndo_if_printer = get_if_printer(ndo, dlt);
+			dumpinfo.ndo = ndo;
+		} else
+			dumpinfo.ndo = NULL;
+
 #ifdef HAVE_PCAP_DUMP_FLUSH
 		if (Uflag)
 			pcap_dump_flush(p);
@@ -1954,11 +1975,11 @@
 		(void)setsignal(SIGNAL_REQ_INFO, requestinfo);
 #endif
 
-	if (ndo->ndo_vflag > 0 && WFileName) {
+	if (ndo->ndo_vflag > 0 && WFileName && !print) {
 		/*
-		 * When capturing to a file, "-v" means tcpdump should,
-		 * every 10 seconds, "v"erbosely report the number of
-		 * packets captured.
+		 * When capturing to a file, if "--print" wasn't specified,
+		 *"-v" means tcpdump should, every 10 seconds,
+		 * "v"erbosely report the number of packets captured.
 		 */
 #ifdef USE_WIN32_MM_TIMER
 		/* call verbose_stats_dump() each 1000 +/-100msec */
@@ -2469,6 +2490,9 @@
 		pcap_dump_flush(dump_info->p);
 #endif
 
+	if (dump_info->ndo != NULL)
+		pretty_print_packet(dump_info->ndo, h, sp, packets_captured);
+
 	--infodelay;
 	if (infoprint)
 		info(0);
@@ -2477,16 +2501,23 @@
 static void
 dump_packet(u_char *user, const struct pcap_pkthdr *h, const u_char *sp)
 {
+	struct dump_info *dump_info;
+
 	++packets_captured;
 
 	++infodelay;
 
-	pcap_dump(user, h, sp);
+	dump_info = (struct dump_info *)user;
+
+	pcap_dump((u_char *)dump_info->p, h, sp);
 #ifdef HAVE_PCAP_DUMP_FLUSH
 	if (Uflag)
-		pcap_dump_flush((pcap_dumper_t *)user);
+		pcap_dump_flush(dump_info->p);
 #endif
 
+	if (dump_info->ndo != NULL)
+		pretty_print_packet(dump_info->ndo, h, sp, packets_captured);
+
 	--infodelay;
 	if (infoprint)
 		info(0);
@@ -2616,19 +2647,22 @@
 {
 	print_version();
 	(void)fprintf(stderr,
-"Usage: %s [-aAbd" D_FLAG "efhH" I_FLAG J_FLAG "KlLnNOpqStu" U_FLAG "vxX#]" B_FLAG_USAGE " [ -c count ]\n", program_name);
+"Usage: %s [-aAbd" D_FLAG "efhH" I_FLAG J_FLAG "KlLnNOpPqStu" U_FLAG "vxX#]" B_FLAG_USAGE " [ -c count ]\n", program_name);
 	(void)fprintf(stderr,
 "\t\t[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]\n");
 	(void)fprintf(stderr,
 "\t\t[ -i interface ]" j_FLAG_USAGE " [ -M secret ] [ --number ]\n");
+	(void)fprintf(stderr,
+"\t\t[ --print ]");
 #ifdef HAVE_PCAP_SETDIRECTION
 	(void)fprintf(stderr,
-"\t\t[ -Q in|out|inout ]\n");
+" [ -Q in|out|inout ]");
 #endif
 	(void)fprintf(stderr,
-"\t\t[ -r file ] [ -s snaplen ] ");
+" [ -r file ] [ -s snaplen ]\n");
 #ifdef HAVE_PCAP_SET_TSTAMP_PRECISION
-	(void)fprintf(stderr, "[ --time-stamp-precision precision ]\n");
+	(void)fprintf(stderr,
+"\t\t[ --time-stamp-precision precision ]\n");
 	(void)fprintf(stderr,
 "\t\t");
 #endif
--- tcpdump-4.9.3/tcpdump.1.in.orig	2022-05-09 14:01:50.048226701 -0700
+++ tcpdump-4.9.3/tcpdump.1.in	2022-05-09 14:01:51.060185661 -0700
@@ -38,24 +38,32 @@
 .B \-c
 .I count
 ]
-.br
-.ti +8
 [
 .B \-C
 .I file_size
-] [
-.B \-G
-.I rotate_seconds
-] [
+]
+.ti +8
+[
+.B \-E
+.I spi@ipaddr algo:secret,...
+]
+.ti +8
+[
 .B \-F
 .I file
 ]
-.br
-.ti +8
+[
+.B \-G
+.I rotate_seconds
+]
 [
 .B \-i
 .I interface
 ]
+.ti +8
+[
+.B \-\-immediate\-mode
+]
 [
 .B \-j
 .I tstamp_type
@@ -64,16 +72,18 @@
 .B \-m
 .I module
 ]
+.ti +8
 [
 .B \-M
 .I secret
 ]
-.br
-.ti +8
 [
 .B \-\-number
 ]
 [
+.B \-\-print
+]
+[
 .B \-Q
 .I in|out|inout
 ]
@@ -83,10 +93,6 @@
 .I file
 ]
 [
-.B \-V
-.I file
-]
-[
 .B \-s
 .I snaplen
 ]
@@ -95,27 +101,26 @@
 .I type
 ]
 [
+.B \-\-version
+]
+.ti +8
+[
+.B \-V
+.I file
+]
+[
 .B \-w
 .I file
 ]
-.br
-.ti +8
 [
 .B \-W
 .I filecount
 ]
-.br
-.ti +8
-[
-.B \-E
-.I spi@ipaddr algo:secret,...
-]
-.br
-.ti +8
 [
 .B \-y
 .I datalinktype
 ]
+.ti +8
 [
 .B \-z
 .I postrotate-command
@@ -130,13 +135,6 @@
 ]
 .ti +8
 [
-.B \-\-immediate\-mode
-]
-[
-.B \-\-version
-]
-.ti +8
-[
 .I expression
 ]
 .br
@@ -463,12 +461,12 @@
 resolution, and the file is written with a different magic number, to
 indicate that the time stamps are in seconds and nanoseconds; not all
 programs that read pcap savefiles will be able to read those captures.
-.LP
+.IP
 When reading a savefile, convert time stamps to the precision specified
 by \fItimestamp_precision\fP, and display them with that resolution.  If
 the precision specified is less than the precision of time stamps in the
 file, the conversion will lose precision.
-.LP
+.IP
 The supported values for \fItimestamp_precision\fP are \fBmicro\fP for
 microsecond resolution and \fBnano\fP for nanosecond resolution.  The
 default is microsecond resolution.
@@ -579,6 +577,12 @@
 mode for some other reason; hence, `-p' cannot be used as an abbreviation for
 `ether host {local-hw-addr} or ether broadcast'.
 .TP
+.BI \-\-print
+Print parsed packet output, even if the raw packets are being saved to a
+file with the
+.B \-w
+flag.
+.TP
 .BI \-Q " direction"
 .PD 0
 .TP
@@ -690,7 +694,9 @@
 .PD
 If the
 .B \-w
-option is not specified, make the printed packet output
+option is not specified, or if it is specified but the
+.B \-\-print
+flag is also specified, make the printed packet output
 ``packet-buffered''; i.e., as the description of the contents of each
 packet is printed, it will be written to the standard output, rather
 than, when not writing to a terminal, being written only when the output
